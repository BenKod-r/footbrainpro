### ‚úÖ deploy_on_dev_push.yml : build & push image Docker en dev (tag = commit SHA)
name: üß™ Deploy to Dev (dev.footbrainpro.com) on merge to dev

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üß± Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üõ†Ô∏è Build and Push Dev Image
        run: |
          # Remplace dynamiquement le tag dans le fichier compose
          sed "s|IMAGE_TAG|${{ github.sha }}|g" compose.dev.yaml > compose.dev.built.yaml

          # Build & push via Docker Compose
          docker compose -f compose.dev.built.yaml build
          docker tag footbrainpro_app:latest ${{ secrets.DOCKER_USERNAME }}/footbrainpro_dev:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/footbrainpro_dev:${{ github.sha }}

      - name: üöÄ Deploy to DEV via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull de l‚Äôimage fra√Æchement build√©e
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/footbrainpro_dev:${{ github.sha }}
            # Stoppe et supprime les conteneurs utilisant l'image (optionnel si `--remove-orphans` g√®re tout)
            sudo docker-compose down
            # Supprime l'image only si elle existe
            sudo docker rmi footbrainpro_dev:latest || true
            # Retag
            sudo docker tag ${{ secrets.DOCKER_USERNAME }}/footbrainpro_dev:${{ github.sha }} footbrainpro_dev:latest
            # Red√©marre les services
            sudo docker-compose up -d --remove-orphans
            
            # Arr√™t de 10 secondes
            sleep 10
            
            # R√©cup√®re le nom du conteneur
            CONTAINER_FOOTBRAINPRO_DEV=$(sudo docker ps --filter ancestor=footbrainpro_dev:latest --format "{{.Names}}" | head -n 1)

            # Nettoyage du cache
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV php bin/console cache:clear

            # Installation des d√©pendances front
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV npm install

            # Cr√©ation de la base de donn√©es (si non existante)
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV php bin/console doctrine:database:create --if-not-exists

            # Migration de la base de donn√©es
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV php bin/console doctrine:migrations:migrate --no-interaction

            # Suppression des assets obsol√®tes
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV rm -rf public/assets

            # Installation d'importmap
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV php bin/console importmap:install

            # Compilation des styles SCSS ‚Üí CSS
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV sass assets/styles/app.scss:assets/styles/app.css

            # Compilation de asset-map
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV php bin/console asset-map:compile
            
            # Nettoyage du cache
            sudo docker exec $CONTAINER_FOOTBRAINPRO_DEV php bin/console cache:clear
